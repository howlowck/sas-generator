{"version":3,"sources":["main.ts"],"names":[],"mappings":";AA8GC,aA9GD,IAAA,EACM,EAAU,IAAI,YACd,EAAiB,SAAS,cAAc,kBACxC,EAAQ,SAAS,cAAc,QAC/B,EAAW,SAAS,cAAc,kBAClC,EAAU,SAAS,cAAc,iBACjC,EAAW,SAAS,cAAc,QAClC,EAAc,SAAS,cAAc,YACrC,EAAa,SAAS,cAAc,WA0B1C,SAAS,IAAc,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACrB,EAAO,QAAQ,SAAA,GAAK,OAAA,EAAE,UAAW,IAGnC,SAAS,IAAa,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACpB,EAAO,QAAQ,SAAA,GAAK,OAAA,EAAE,UAAW,IAGnC,SAAS,EAAW,GAClB,MAAA,GAAA,EAAgB,UAAU,OAAO,aACjC,EAAM,YAAc,EAGtB,SAAS,IACP,MAAA,GAAA,EAAgB,UAAU,IAAI,aArCG,QAAnC,EAAA,SAAS,cAAc,oBAAY,IAAA,GAAA,EAAE,iBAAiB,SAAU,SAAC,GAC/D,EAAI,iBACJ,EAAc,EAAU,EAAa,EAAY,GAIjD,EAHY,EAAS,MACN,EAAY,MACb,EAAW,OAEtB,KAAK,SAAA,GACJ,EAAW,GACX,EAAa,OAInB,EAAQ,iBAAiB,QAAS,WAChC,EAAS,MAAQ,GACjB,EAAY,MAAQ,GACpB,EAAW,MAAQ,GACnB,EAAa,EAAU,EAAa,EAAY,GAChD,EAAc,GACd,MAqBF,IAAM,EAAY,CAChB,KAAM,SAAC,GAAiB,OAAO,MAAP,GACxB,MAAO,SAAC,GAAkB,OAAQ,OAAR,GAC1B,MAAO,SAAC,GAAkB,OAAQ,QAAR,IAI5B,SAAS,EAA0B,EAAa,EAAgB,GACxD,IAAA,EAAU,mBAAmB,GAC7B,EAAM,IAAI,KACV,EAAe,EAAU,MAAM,GAC/B,EAAM,KAAK,MAAM,EAAI,UAAY,KAAQ,EACzC,EAAY,EAAU,KAAO,EAC7B,EAAU,EAAQ,OAAO,GAIxB,OAHP,QAAQ,IAAI,MAAO,GACnB,QAAQ,IAAI,MAAO,GACnB,QAAQ,IAAI,UAAW,GAChB,EAAa,GACjB,KAAK,SAAA,GACG,OAAA,EAAc,EAAS,KAE/B,KAAK,SAAA,GAEG,OADP,QAAQ,IAAI,QAAS,GACd,4BAA8B,EAAU,QAC3C,mBAAmB,GAAS,OAAS,EAAM,QAAU,IAI/D,SAAS,EAAa,GACb,OAAA,OAAO,OAAO,UACnB,MACA,EAAQ,OAAO,GACf,CACE,KAAM,OACN,KAAM,CACJ,KAAM,aAGV,EACA,CAAC,SAIL,SAAS,EAAc,EAAyB,GACvC,OAAA,OAAO,OAAO,KACnB,CAAC,KAAM,OAAQ,KAAM,CAAC,KAAM,YAC5B,EACA,GACA,KAAK,SAAA,GACC,IACA,EADQ,IAAI,WAAW,GACR,OAAO,SAAC,EAAM,GAC1B,OAAA,EAAO,OAAO,aAAa,IACjC,IACI,OAAA,KAAK,KAIhB,SAAS,EAAW,GACX,OAAA,SAAS,mBAAmB","file":"main.4c20b4fb.js","sourceRoot":"..\\src","sourcesContent":["// Core and DOM Variables\r\nconst encoder = new TextEncoder()\r\nconst sasContainerEl = document.querySelector('#sas-container')\r\nconst sasEl = document.querySelector('#sas') as HTMLPreElement\r\nconst submitEl = document.querySelector('#submit-button') as HTMLInputElement\r\nconst resetEl = document.querySelector('#reset-button') as HTMLInputElement\r\nconst uriInput = document.querySelector('#uri') as HTMLInputElement\r\nconst saNameInput = document.querySelector('#sa-name') as HTMLInputElement\r\nconst saKeyInput = document.querySelector('#sa-key') as HTMLInputElement\r\n\r\n// DOM stuff\r\ndocument.querySelector('#sas-form')?.addEventListener('submit', (evt) => {\r\n  evt.preventDefault()\r\n  disableInputs(uriInput, saNameInput, saKeyInput, submitEl)\r\n  const uri = uriInput.value\r\n  const saName = saNameInput.value\r\n  const saKey = saKeyInput.value\r\n  generateSharedAccessToken(uri, saName, saKey)\r\n    .then(sas => {\r\n      showResult(sas)\r\n      enableInputs(resetEl)\r\n    })\r\n})\r\n\r\nresetEl.addEventListener('click', () => {\r\n  uriInput.value = ''\r\n  saNameInput.value = ''\r\n  saKeyInput.value = ''\r\n  enableInputs(uriInput, saNameInput, saKeyInput, submitEl)\r\n  disableInputs(resetEl)\r\n  hideAndClearResult()\r\n})\r\n\r\n\r\nfunction disableInputs(...inputs: Array<HTMLInputElement>) {\r\n  inputs.forEach(_ => _.disabled = true)\r\n}\r\n\r\nfunction enableInputs(...inputs: Array<HTMLInputElement>) {\r\n  inputs.forEach(_ => _.disabled = false)\r\n}\r\n\r\nfunction showResult(sas: string) {\r\n  sasContainerEl?.classList.remove('is-hidden')\r\n  sasEl.textContent = sas\r\n}\r\n\r\nfunction hideAndClearResult() {\r\n  sasContainerEl?.classList.add('is-hidden')\r\n}\r\n\r\nconst durations = {\r\n  days: (days: number) => days * 86400,\r\n  weeks: (weeks: number) => weeks * 604800,\r\n  years: (years: number) => years * 31536000\r\n}\r\n\r\n// Main Sig Function\r\nfunction generateSharedAccessToken(uri: string, saName: string, saKey: string) {\r\n  const encoded = encodeURIComponent(uri)\r\n  const now = new Date()\r\n  const secsInFuture = durations.weeks(1)\r\n  const ttl = Math.round(now.getTime() / 1000) + secsInFuture\r\n  const signature = encoded + '\\n' + ttl\r\n  const sigUtf8 = encoder.encode(signature)\r\n  console.log('ttl', ttl)\r\n  console.log('sig', signature)\r\n  console.log('sigUtf8', sigUtf8)\r\n  return getCryptoKey(saKey)\r\n    .then(cryptoKey => {\r\n      return generateToken(sigUtf8, cryptoKey)\r\n    })\r\n    .then(token => {\r\n      console.log('token', token)\r\n      return 'SharedAccessSignature sr=' + encoded + '&sig=' +  \r\n          encodeURIComponent(token) + '&se=' + ttl + '&skn=' + saName; \r\n    })\r\n}\r\n\r\nfunction getCryptoKey(key: string) {\r\n  return crypto.subtle.importKey(\r\n    'raw',\r\n    encoder.encode(key),\r\n    {\r\n      name: 'HMAC',\r\n      hash: {\r\n        name: 'SHA-256'\r\n      }\r\n    },\r\n    false,\r\n    ['sign']\r\n  )\r\n}\r\n\r\nfunction generateToken(encodedInfo: Uint8Array, cryptoKey: CryptoKey) {\r\n  return crypto.subtle.sign(\r\n    {name: 'HMAC', hash: {name: 'SHA-265'}},\r\n    cryptoKey,\r\n    encodedInfo\r\n  ).then(tokenBuffer => {\r\n    const bytes = new Uint8Array(tokenBuffer)\r\n    const binary = bytes.reduce((prev, curr) => {\r\n      return prev + String.fromCharCode(curr)\r\n    }, '')\r\n    return btoa(binary)\r\n  })\r\n}\r\n\r\nfunction encodeUtf8(str: string) {\r\n  return unescape(encodeURIComponent(str));\r\n}\r\n"]}